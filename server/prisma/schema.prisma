// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// criamos uma tabela com nome model e o nome do nosso model que é Habit, ou seja, vai salvar os hábitos ali dentro
// @id é a chave primária da aplicação
// @default significa que quando o hábito for criado será preenchido automaticamente com uuid (id único universal)
//@@map is used to assign a different name to a model and not a particular field. So for example if a table name is UserDetails and you want to access it as user_details in the generated client you can use @@map attribute.

model Habit {
  id         String   @id @default(uuid())
  title      String
  created_at DateTime

  dayHabits     DayHabit[]
  weekDays HabitWeekDays[]

  @@map("habits")
}

// a tabela abaixo vai cadastrar a recorrência do hábito (quais dias da semana o hábito será realizado)

model HabitWeekDays {
  id       String @id @default(uuid())
  habit_id String
  week_day Int

  habit   Habit  @relation(fields: [habit_id], references: [id])


  @@unique([habit_id, week_day])
  @@map("habit_week_days")
}

model Day {
  id   String   @id @default(uuid())
  date DateTime // vai registrar o dia que completou pelo menos 01 hábito

  dayHabits DayHabit[]

  @@unique([date]) // índice unique (único) => cada registro dentro da tabela day, precisa ter o campo date único, ou seja, não pode ter 02 dias cadastrados com datas repetidas
  @@map("days")
}

model DayHabit {
  id String @id @default(uuid())

  day_id   String // vai armazenar a id da tabela days
  habit_id String // vai armazenar a id da tabela habits

  day   Day   @relation(fields: [day_id], references: [id]) //relacionamento com a tabela Day
  habit Habit @relation(fields: [habit_id], references: [id]) //relacionamento com a tabela Habit

  @@unique([day_id, habit_id])
  @@map("day_habits")
}
